{"version":3,"sources":["components/card/card.js","components/cardList/cardList.js","components/App.js","reportWebVitals.js","index.js"],"names":["Card","props","job","company","position","postedAt","contract","featured","location","logo","role","level","languages","tools","combined","newListing","new","imageLogo","console","log","className","src","alt","map","skill","onClick","handleSkillSelect","value","id","CardList","jobs","index","App","useState","setJobs","skills","setSkills","useEffect","fetchJobs","a","fetch","then","data","json","addSkill","newSkillArr","handleRemSkill","event","currentSkills","toRemove","indexOf","target","splice","filter","length","viewJobs","finalView","uniqueChars","forEach","comb","view","find","undefined","push","c","includes","char","filterJobs","selected","selectedInSkills","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ba85a8d.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nexport function Card(props) {\n    const { company, position, postedAt, contract, featured, location, logo, role, level } = props.job;\n    const languages = props.job.languages;\n    const tools = props.job.tools;\n    const combined = [...tools, ...languages, role, level]\n    const newListing = props.job.new;\n    const imageLogo = `${logo}`\n    console.log(imageLogo);\n   \n    return(\n        <div className=\"container card small\">\n\n     <div className=\"imgContainer\">\n        {/*<--Company logo image here -->*/}\n        <img src={imageLogo} alt=\"logo\" />\n    </div>\n    <div className=\"container small\">\n            {/*<--Item Start -->*/}\n    <div className=\"container between mob\">\n      <div className=\"col\">\n          <ul className=\"container slimLines\">\n              <li className=\"title company\"><strong>{company}</strong></li>\n              <div className=\"container status\">\n                {newListing ? <li className=\"new\">New</li> : null}\n                {featured ? <li className=\"featured\">Featured</li> : null}\n              </div>\n          </ul>\n      \n      <p className=\"jobTitle slimLines\"><strong>{position}</strong></p>\n      <ul className=\"container details slimLines \">\n          <li>{postedAt}</li>\n          <li>{contract}</li>\n          <li>{location}</li>\n      </ul>\n  </div>\n  {/*<!-- Role -->*/}\n    <div className=\"basis\">\n      <ul className=\"container skills wrap\">\n          {combined.map(skill =>    {\n              return <li><button\n                            onClick={props.handleSkillSelect} \n                            value={skill} \n                            id={skill}\n                            key={props.job.id}\n                            >\n                            {skill}\n                        </button>\n                    </li>\n          })}\n      </ul>\n     </div>\n    </div>\n\n     </div>\n  </div>\n\n    )\n}","import React from 'react';\nimport { Card } from '../card/card';\n\nexport function CardList(props) {\n    \n   \n    return  (\n            \n            props.jobs.map((job, index) => {\n                console.log(index)\n                return (\n                    <div>\n                        <Card job={job} \n                                handleSkillSelect={props.handleSkillSelect} \n                                />\n                    </div>\n                )\n            })\n        \n    )\n\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { CardList } from './cardList/cardList';\n\n\nfunction App(props) {\n\n\n const [ jobs, setJobs ] = useState([]);\n const [ skills, setSkills ] = useState([]);\n\n \n//Load the jobs data with the fetch below\n useEffect(() =>   {\n  fetchJobs();  \n },[]);\n\n //This is the promise and fetch that loads the data\n const fetchJobs = async () => {\n\n  await fetch (' http://localhost:3000/jobs')\n     .then((data) => data.json())\n     .then((data) => {\n       setJobs(data)\n     })\n }\n\n\n// This is the event handler it checks the skills array to ensure its not already in there.\n const handleSkillSelect = (event) =>  {\n   const selected = event.target.value;\n   console.log(`selected value is ${selected}`)\n   let newSkillArr = [...skills];\n   let selectedInSkills = newSkillArr.find(element => element === selected)\n   console.log(`This will be undefined if selected is not in the skills array: ${selectedInSkills }`)\n  if(selectedInSkills !== selected){newSkillArr.push(selected)}\n    addSkill(newSkillArr);\n }\n\n //This is a setter for the skills array\n const addSkill = (newSkillArr)  =>  {\n  setSkills(newSkillArr);\n}\n\n//This clears the skill array altogether\n const handleClear = (event)  =>  {\n   console.log('Next command clears the skills array')\n  setSkills([]);\n  console.log('cleared')\n}\n \n //This function removes the skill when it is x'd in the filter panel\n const handleRemSkill = (event) => {\n  let currentSkills = [...skills];\n  let toRemove = currentSkills.indexOf(event.target.value);\n  currentSkills.splice(toRemove, 1);\n  addSkill(currentSkills);\n }\n\n //This is a long and ungly filter function that works but not in the code flow\n const filterJobs = (jobs) => {\n   let viewJobs = [];\n   let finalView = [];\n   let uniqueChars = [];\n   jobs.forEach(job => {\n     //Spread the properties that need to be in the skills section into one array\n    let combinedSkills = [...job.languages, ...job.tools, job.role, job.level]\n     combinedSkills.forEach(comb =>  {\n       let view = skills.find(skill => skill === comb)\n       //console.log(view)\n       if(view !== undefined){viewJobs.push(job.id)}\n       view = null;\n       \n       viewJobs.forEach((c) => {\n           if (!uniqueChars.includes(c)) {\n               uniqueChars.push(c);\n           }\n           \n       });\n     })\n    });\n    uniqueChars.forEach(char =>  {\n      jobs.forEach(job =>  {\n        if(job.id === char)  {\n         finalView.push(job)\n        }\n      })\n    })\n    //console.log(`this marks the end of the filter function ${finalView}`)\n    return finalView\n   };\n \n   \n   const filter = skills.length === 0 ? jobs : filterJobs(jobs)\n\n  return (\n    \n        <div className=\"body\">\n          <div className=\"head\">\n            {/*Header Image here*/}\n          </div>\n\n          <div className=\"container between filter border\">\n            <ul className=\"container filters wrap\">\n            {skills.map(skill =>  {\n                return <li>{skill} <button className=\"delete\" value={skill} onClick={handleRemSkill} key={skill} >&#10008;</button></li>\n            })} \n            </ul>\n            <button className=\"clear\" onClick={handleClear}>Clear</button>\n          </div>\n            \n          <CardList  \n            jobs={filter} \n            handleSkillSelect={handleSkillSelect} \n            />\n        </div>\n  );\n \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}